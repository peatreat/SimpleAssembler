#include "pe.h"

/*
in assembler we need a rel offset resolver for if there is a relative offset operand for single op, two op, or jcc op

we also need a rel offset resolver if IS_DEREF and BASE_REG is RIP

for each resolver object we should have a pointer to the relative offset, the ip position of next instruction, and the rva in original assembly that is supposed to offset to
*/



int main() {
    //std::vector<uint8_t> instructions {
    //    0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00
    //    //0xFF, 0x15, 0x02, 0x00, 0x00, 0x00,
    //    //0xc3, 0xc3,
    //    //0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    //    //0xc3,
    //    //0x48, 0x31, 0xC0, 0x48, 0x85, 0xC0, 0x74, 0x01, 0xC3, 0x48, 0x31, 0xC9, 0x48, 0x31, 0xD2, 0x4D, 0x31, 0xC0, 0x4D, 0x31, 0xC9, 0x41, 0xFF, 0xD3
    //    //0x75, 0x07,
    //    //0x48, 0x83, 0xEC, 0x28, 0x48, 0x31, 0xC9, 0x48, 0x31, 0xD2, 0x4D, 0x31, 0xC0, 0x4D, 0x31, 0xC9, 0xFF, 0xD0, 0x48, 0x83, 0xC4, 0x28, 0xC3
    //    //0x0F, 0x85, 0xE2, 0x67, 0x0A, 0x00
    //    //0x75, 0x06
    //    //0xFF, 0x15, 0x00, 0x01, 0x00, 0x00
    //    //0x48, 0x89, 0x15, 0x00, 0x00, 0x00, 0x00
    //    //0x48, 0x89, 0x05, 0x00, 0x01, 0x00, 0x00,
    //    //0x48, 0x83, 0xC0, 0x02,
    //    //0x52
    //    //0x68, 0xFF, 0xFF, 0xFF, 0x7F
    //    //0xFF, 0x34, 0x02
    //    //0xFF, 0x34, 0x25, 0xFF, 0xFF, 0xFF, 0x7F
    //    //0xFF, 0xB4, 0xD1, 0xFF, 0xFF, 0xFF, 0x7F
    //    //0xFF, 0x30
    //};

    //Assembler assembler(instructions, 0);

    //assembler.compile();
    
    PeFile pe_file("C:\\Users\\Peatreat\\source\\repos\\SimpleAssembler\\x64\\Debug\\test.dll");

    auto virtualized = pe_file.virtualize();

    std::ofstream output("virtualized.dll", std::ios::binary);

    output.write((char*)virtualized.data(), virtualized.size());

    output.close();

    return 0;
}